PIPELINE(With help of Aggregate)🔥🔥🔥
codeio> db.course.aggregate([{$match:{videos:{$gte:35}}}])                 //see that how to write the aggregate. $match work like that find()🤩🤩🤩
[
  {
    _id: ObjectId('68d2cac1488f2d29f7cebea4'),
    name: 'DSA',
    videos: 35,
    duration: 28.5,
    completed: true
  },
  {
    _id: ObjectId('68d2cbdb488f2d29f7cebea7'),
    name: 'JAVA',
    videos: 50,
    duration: 10.5,
    completed: true
  },
  {
    _id: ObjectId('68d2cbdb488f2d29f7cebea8'),
    name: 'C++',
    videos: 36,
    duration: 10.51,
    completed: true
  },
  {
    _id: ObjectId('68d2d5e15ed1a5518ccebea4'),
    name: 'React',
    videos: 35,
    duration: 18.3,
    PublishedDate: ISODate('2025-09-23T00:00:00.000Z'),
    instructors: [ 'Bob', 'Goms' ],
    relatedCourses: { name: 'js', videos: 36, duration: 11 },
    completed: true
  },
  {
    _id: ObjectId('68d4182cc5e0eb2fcbcebea5'),
    name: 'c++',
    videos: 50,
    duration: 10.5,
    completed: true
  },
  {
    _id: ObjectId('68d5792c74d91a0aa6af9f6c'),
    name: 'Spring Boot',
    duration: 6.7,
    videos: 50
  }
]

codeio> db.course.aggregate([{$match:{videos:{$gte:35}}},{$sort:{videos:-1}},{$limit:2}])       //Aggregate also use chain functions 😏😏😏
[
  {
    _id: ObjectId('68d4182cc5e0eb2fcbcebea5'),
    name: 'c++',
    videos: 50,
    duration: 10.5,
    completed: true
  },
  {
    _id: ObjectId('68d2cbdb488f2d29f7cebea7'),
    name: 'JAVA',
    videos: 50,
    duration: 10.5,
    completed: true
  }
]
👇👇👇(Recap)
codeio> db.course.aggregate([{$match:{videos:{$gte:35}}}])
codeio> db.course.aggregate([{$match:{videos:{$gte:35}}},{$sort:{videos:-1}},{$limit:2}])
💕💕💕


codeio> db.coustomer.insertMany([{name:"Goms",amount:250},{name:"Goms",amount:400},{name:"Siva",amount:100},{name:"Siva",amount:10},{name:"Goms",amount:150}])           //For Demo supprose 😗😗😗🩶
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('68d8018c9743ab97accebea4'),
    '1': ObjectId('68d8018c9743ab97accebea5'),
    '2': ObjectId('68d8018c9743ab97accebea6'),
    '3': ObjectId('68d8018c9743ab97accebea7'),
    '4': ObjectId('68d8018c9743ab97accebea8')
  }
}

codeio> db.coustomer.aggregate([{$group:{_id:"$name",total:{$sum:"$amount"}}}])                    //$group use to group the elements .First _id is name $is compulsory give like $name,same total $sum means add all amount that name💥
[ { _id: 'Goms', total: 800 }, { _id: 'Siva', total: 110 } ]
codeio> db.coustomer.aggregate([{$group:{_id:"$name",MAX:{$max:"$amount"}}}])                      //You use to Max find in the same name💖
[ { _id: 'Goms', MAX: 400 }, { _id: 'Siva', MAX: 100 } ]
codeio> db.coustomer.aggregate([{$group:{_id:"$name",Minimum:{$min:"$amount"}}}])                  //Also find Min👾
[ { _id: 'Siva', Minimum: 10 }, { _id: 'Goms', Minimum: 150 } ]
codeio> db.coustomer.aggregate([{$group:{_id:"$name",Average:{$avg:"$amount"}}}])                  //$avg means that add all amount and give Average of them💚
[
  { _id: 'Goms', Average: 266.6666666666667 },
  { _id: 'Siva', Average: 55 }
]
codeio> db.coustomer.aggregate([{$group:{_id:"$name",Average:{$avg:"$amount"}}},{$sort:{amount:-1}},{$limit:2}])          //This is chain funstions😎
[
  { _id: 'Goms', Average: 266.6666666666667 },
  { _id: 'Siva', Average: 55 }
]

codeio> db.coustomer.aggregate([{$group:{_id:"$name",Average:{$avg:"$amount"}}},{$sort:{amount:-1}},{$limit:2},{$out:"Average Purchase"}])       //this $out means before ouput show like, that are save in new collection calles Average Purchase💥

codeio>  show collections                         //Method to view the collection in database🧡
Average Purchase
course
coustomer

codeio> db.getCollectionNames()                          //This is another method💖
[ 'Average Purchase', 'coustomer', 'course' ]

codeio> db.getCollectionInfos()                           //this means that Show collections with that Info🩵
[
  {
    name: 'Average Purchase',
    type: 'collection',
    options: {},
    info: {
      readOnly: false,
      uuid: UUID('17618564-97cc-4a37-9f52-a4accdb70a7c')
    },
    idIndex: { v: 2, key: { _id: 1 }, name: '_id_' }
  },
  {
    name: 'coustomer',
    type: 'collection',
    options: {},
    info: {
      readOnly: false,
      uuid: UUID('2cea514e-9458-425d-8025-060fe0a31dfa')
    },
    idIndex: { v: 2, key: { _id: 1 }, name: '_id_' }
  },
  {
    name: 'course',
    type: 'collection',
    options: {},
    info: {
      readOnly: false,
      uuid: UUID('85ee475e-12dd-4908-bdb9-a1bcd26996cd')
    },
    idIndex: { v: 2, key: { _id: 1 }, name: '_id_' }
  }
]

codeio> db.getCollection("Average Purchase").find()                  //In case your collection with Space use this Method😮😮😮😮
[
  { _id: 'Goms', Average: 266.6666666666667 },
  { _id: 'Siva', Average: 55 }
]
codeio> db.coustomer.aggregate([{$group:{_id:"$name",Average:{$avg:"$amount"}}},{$sort:{amount:-1}},{$limit:2},{$count:"name"}])       //last we use $count ,so written as 2 🤨
[ { name: 2 } ]
codeio> db.coustomer.aggregate([{$count:"name"}])                                                          //this Firstly $count use, so written as 5 😌
[ { name: 5 } ]

👇👇👇👇👇(Recap)
db.coustomer.aggregate([{$group:{_id:"$name",total:{$sum:"$amount"}}}])
db.coustomer.aggregate([{$group:{_id:"$name",MAX:{$max:"$amount"}}}])
db.coustomer.aggregate([{$group:{_id:"$name",Minimum:{$min:"$amount"}}}])
db.coustomer.aggregate([{$group:{_id:"$name",Average:{$avg:"$amount"}}}])
db.coustomer.aggregate([{$group:{_id:"$name",Average:{$avg:"$amount"}}},{$sort:{amount:-1}},{$limit:2}])
db.coustomer.aggregate([{$group:{_id:"$name",Average:{$avg:"$amount"}}},{$sort:{amount:-1}},{$limit:2},{$out:"Average Purchase"}])
✍️✍️✍️
show collections
db.getCollectionNames()
db.getCollectionInfos()
db.getCollection("Average Purchase").find()
db.coustomer.aggregate([{$group:{_id:"$name",Average:{$avg:"$amount"}}},{$sort:{amount:-1}},{$limit:2},{$count:"name"}])
db.coustomer.aggregate([{$group:{_id:"$name",Average:{$avg:"$amount"}}},{$sort:{amount:-1}},{$limit:2},{$count:"name"}])
💕💕💕💕💕
